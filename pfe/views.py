#!/usr/bin/env python
"""
Desenvolvido para o Projeto Final de Engenharia.

Autor: Luciano Pereira Soares <lpsoares@insper.edu.br>
Data: 17 de Junho de 2023
"""

import logging

from django.conf import settings
from django.contrib.auth.decorators import login_required, permission_required, user_passes_test
from django.middleware.csrf import get_token
from django.shortcuts import render, get_object_or_404
from django.http import HttpResponse

from administracao.models import Carta

# Get an instance of a logger
logger = logging.getLogger("django")

def index(request):
    """P√°gina principal do sistema."""
    if request.user.is_authenticated:
        return render(request, "index.html")
    else:
        info = get_object_or_404(Carta, template="Informa√ß√£o")
        return render(request, "info.html", {"info": info})

def info(request):
    """P√°gina com informa√ß√µes."""
    info = get_object_or_404(Carta, template="Informa√ß√£o")
    return render(request, "info.html", {"info": info})

def manutencao(request):
    """P√°gina de Manuten√ß√£o do sistema."""
    return render(request, "manutencao.html")

def custom_400(request, exception):
    mensagem = "<h1>Bad Request (400)</h1>"
    if (exception):
        mensagem += str(exception) + "<br>"
    mensagem += "Em caso de d√∫vida " + settings.CONTATO
    #t = loader.get_template("400.html")
    #t.render(Context({"exception_value": value,})
    return HttpResponse(mensagem)


from organizacoes.models import *
from projetos.models import Organizacao

@login_required
@permission_required("users.view_administrador", raise_exception=True)
def migracao(request):
    """tempor√°rio."""
    message = "Nada Feito"

    message = ""
    
    Segmento.objects.get_or_create(nome="Outros", nome_en="Others", icone="‚ùì")
    Segmento.objects.get_or_create(nome="Sa√∫de e Biotecnologia", nome_en="Health and Biotechnology", icone="üß¨")
    Segmento.objects.get_or_create(nome="Ind√∫stria e Manufatura", nome_en="Industry and Manufacturing", icone="üè≠")
    Segmento.objects.get_or_create(nome="Tecnologia da Informa√ß√£o", nome_en="Information Technology", icone="üíª")
    Segmento.objects.get_or_create(nome="Ensino e Educa√ß√£o", nome_en="Education", icone="üß†")
    Segmento.objects.get_or_create(nome="Finan√ßas e Investimentos", nome_en="Finance and Investments", icone="üè¶")
    Segmento.objects.get_or_create(nome="Varejo e Consumo", nome_en="Retail and Consumption", icone="üõí")
    Segmento.objects.get_or_create(nome="Consultoria e Servi√ßos", nome_en="Consulting and Services", icone="üßë‚Äçüíº")
    Segmento.objects.get_or_create(nome="Transporte e Log√≠stica", nome_en="Transport and Logistics", icone="üöö")
    Segmento.objects.get_or_create(nome="Sustentabilidade", nome_en="Sustainability", icone="üå±")
    Segmento.objects.get_or_create(nome="Setores P√∫blicos", nome_en="Public Sectors", icone="üèõÔ∏è")
    Segmento.objects.get_or_create(nome="Agroneg√≥cio e Alimentos", nome_en="Agribusiness and Food", icone="üåæ")
    Segmento.objects.get_or_create(nome="Arte e Cultura", nome_en="Art and Culture", icone="üé®")
    Segmento.objects.get_or_create(nome="Seguran√ßa e Defesa", nome_en="Security and Defense", icone="üõ°Ô∏è")
    Segmento.objects.get_or_create(nome="Esporte e Lazer", nome_en="Sports and Leisure", icone="‚öΩ")
    
    message += "<br>Segmentos criados com sucesso:<br>"

    empresas = {
        "Agroneg√≥cio e Alimentos": [
            "Ambev",
            "Bayer",
            "Cargill",
            "Coca-Cola FEMSA",
            "Danone",
            "Embrapa",
            "Mitsui & Co Coffee Trading Brazil",
            "Puratos",
            "Ra√≠zen",
            "Sipcam Nichino Brasil",
            "Syngenta Seeds"
        ],
        "Arte e Cultura": [
            "Arvore Experi√™ncias Imersivas",
            "Daccord Music",
            "Lote45",
            "MASP",
            "SBT",
            "Wildlife Studios"
        ],
        "Consultoria e Servi√ßos": [
            "AUGME CAPITAL",
            "Backstage Estrat√©gias Digitais",
            "Cambridge Family Enterprise Group",
            "Exed Consulting",
            "Falconi e Associados Consultoria Empresarial",
            "Fintalk",
            "Inmetrics",
            "Insper Alumni",
            "NTT Data Brasil",
            "Pinheiro Guimar√£es",
            "Projectiva",
            "SAP",
            "Serasa experian",
            "Tivit",
            "Traive",
            "Velt Partners"
        ],
        "Ensino e Educa√ß√£o": [
            "Bioedtech",
            "Insper",
            "PrairieLearn",
            "Technische Hochschule Ingolstadt",
            "Universidade Federal de Pernambuco",
            "University of Illinois",
            "University of Texas Rio Grande Valley",
            "Universit√© C√¥te d'Azur ‚Äì Mediterranean Institute of Risk, Environment and Sustainable Development"
        ],
        "Esporte e Lazer": [
            "Confedera√ß√£o Brasileira de Futsal",
            "Paraty Brazil by UTMB",
            "Tapps Games"
        ],
        "Finan√ßas e Investimentos": [
            "Bexs Banco",
            "Blackbelt Finance",
            "Bradesco",
            "BTG Pactual",
            "BW Gest√£o de Investimentos",
            "C6",
            "DAO Capital",
            "Gauss Capital",
            "Jera Capital",
            "Kapitalo Investimentos",
            "Legacy Capital",
            "Nubank",
            "QI Tech",
            "Rendimento Pay",
            "SRM Asset"
        ],
        "Ind√∫stria e Manufatura": [
            "ABB",
            "AcelorMittal",
            "Basf",
            "Braskem",
            "CCN Automa√ß√£o",
            "Companhia Sider√∫rgica Nacional",
            "Embraer",
            "ENTEC Ravago",
            "General Electric",
            "General Motors do Brasil",
            "Gerdau Graphene",
            "Intelbras",
            "JHP Automa√ß√£o",
            "Klabin",
            "Mahle",
            "Maxion Structural Components",
            "Mercedes-Benz do Brasil",
            "OMRON",
            "Pollux Automation",
            "Rockwell Automation",
            "ROMI",
            "Sab√≥",
            "Santista T√™xtil",
            "SCANIA",
            "Schneider Electric",
            "Schulz S.A",
            "Selco Tecnologia e Ind√∫stria",
            "Siemens",
            "Sindipe√ßas",
            "Voith Paper",
            "VOSS Automotive",
            "Votorantim",
            "WEG",
            "Whirlpool"
        ],
        "Outros": [
            "Albernaz",
            "Boldr",
            "Confedera√ß√£o Nacional da Ind√∫stria",
            "Correios",
            "Dotz",
            "Eixo Estrat√©gia Pol√≠tica",
            "Funda√ß√£o Oswaldo Cruz - Instituto carlos chagas",
            "Inova√ß√£o Social",
            "Instituto Nacional de Pesquisas Espaciais",
            "IPT",
            "J. Assy",
            "Minist√©rio P√∫blico Federal",
            "Pol√≠cia Militar do Estado de S√£o Paulo",
            "Sabesp",
            "Salvaguarda",
            "Sistemas Urbanos",
            "Suzano"
        ],
        "Sa√∫de e Biotecnologia": [
            "A. C. Camargo Cancer Center",
            "AACD",
            "Braincare Desenvolvimento e Inova√ß√£o Tecnol√≥gica",
            "Bright Photomedicine",
            "EMS",
            "Hospital Albert Einstein",
            "Hospital Alem√£o Oswaldo Cruz",
            "Hospital Benefic√™ncia Portuguesa",
            "Hospital S√≠rio-Liban√™s",
            "Indago Devices Inc",
            "Johnson & Johnson",
            "Kenvue (J&J)",
            "Magnamed Tecnologia M√©dica",
            "Mediterr√¢neo Sa√∫de",
            "Mevo Sa√∫de",
            "Mirca Servi√ßos de Fisioterapia"
        ],
        "Seguran√ßa e Defesa": [
            "Akaer",
            "Airis",
            "Akaer",
            "Salvaguarda"
        ],
        "Setores P√∫blicos": [
            "CTI Renato Archer"
        ],
        "Sustentabilidade": [
            "Cicloway",
            "Klabin",
            "M√≠nimo P&D",
            "Solar Bot",
            "Suzano",
            "Universit√© C√¥te d'Azur ‚Äì Mediterranean Institute of Risk, Environment and Sustainable Development"
        ],
        "Tecnologia da Informa√ß√£o": [
            "Amazon",
            "Aveva",
            "Binario Cloud",
            "BirminD Otimiza√ß√£o",
            "COMPSIS",
            "Connect Data",
            "CWS Platform",
            "D2Eng",
            "Dell Technologies",
            "deX Labs",
            "Fanatee",
            "Fiberbus",
            "Google",
            "Grupo BYX",
            "Hewlett-Packard",
            "IBM Brasil",
            "iCelera",
            "ifood",
            "Intel",
            "join.valle",
            "Lab. Arq. Futuro de Cidades",
            "Loft",
            "Looqbox",
            "Mastertech",
            "Mellanox",
            "Microsoft",
            "NEC",
            "Neorisk",
            "Neoway Business Solutions",
            "Nvidia",
            "Omega7 Systems",
            "Opus Software",
            "Oracle",
            "PCA Engenharia de Software",
            "Peerdustry",
            "Pinpag",
            "Plugify",
            "PREDIPARK",
            "Quinto Andar",
            "SMART Modular Technologies",
            "Spacetime Ventures",
            "SPI",
            "STMicroelectronics",
            "Tata  Consultancy Services",
            "Unico"
        ],
        "Transporte e Log√≠stica": [
            "Alupar",
            "Azul",
            "BPN Transmiss√µes",
            "Latam",
            "Mercosul-Line",
            "Mottu",
            "SCANIA",
            "tembici",
            "Ultracargo"
        ],
        "Varejo e Consumo": [
            "B2W",
            "Creditas",
            "Daimon",
            "Incentiv",
            "Via Varejo"
        ]
    }

    for segmento, empresas in empresas.items():
        s = Segmento.objects.get(nome=segmento)
        for empresa in empresas:
            e = Organizacao.objects.filter(nome=empresa).last()
            if not e:
                message += f"<br>{empresa} n√£o encontrada"
                continue
            e.segmento = s
            e.save()
            message += f"<br>{empresa} - {s.nome}"
    message += "<br>Empresas migradas com sucesso:<br>"

    return HttpResponse(message)
